import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import * as pdfjsLib from "pdfjs-dist/build/pdf";
import { Configuration, OpenAIApi } from "openai";
pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;

const configuration = new Configuration({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default function FitCalculator() {
  const [resumeText, setResumeText] = useState("");
  const [jdText, setJdText] = useState("");
  const [fitScore, setFitScore] = useState(null);
  const [missingSkills, setMissingSkills] = useState([]);
  const [jdSkills, setJdSkills] = useState([]);

  const extractTextFromPdf = async (file) => {
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    let text = "";
    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const content = await page.getTextContent();
      const strings = content.items.map((item) => item.str);
      text += strings.join(" ") + " ";
    }
    return text;
  };

  const handleFileUpload = async (e, setText) => {
    const file = e.target.files[0];
    if (file.type === "application/pdf") {
      const text = await extractTextFromPdf(file);
      setText(text);
    } else {
      const reader = new FileReader();
      reader.onload = () => {
        setText(reader.result);
      };
      reader.readAsText(file);
    }
  };

  const extractKeywords = (text) => {
    const stopwords = ["the", "and", "for", "with", "that", "this", "from", "have", "will", "are"];
    const words = text.toLowerCase().match(/\b\w+\b/g) || [];
    const freq = words.reduce((acc, word) => {
      if (!stopwords.includes(word) && word.length > 2) {
        acc[word] = (acc[word] || 0) + 1;
      }
      return acc;
    }, {});
    return Object.keys(freq).filter((word) => freq[word] > 1);
  };

  const getSemanticScore = async (resume, jd) => {
    try {
      const embeddingRes = await openai.createEmbedding({
        model: "text-embedding-ada-002",
        input: [resume, jd],
      });

      const [resumeVec, jdVec] = embeddingRes.data.data.map((e) => e.embedding);

      const cosineSimilarity = (a, b) => {
        const dot = a.reduce((sum, val, i) => sum + val * b[i], 0);
        const magA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));
        const magB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));
        return dot / (magA * magB);
      };

      return cosineSimilarity(resumeVec, jdVec);
    } catch (error) {
      console.error("Embedding error:", error);
      return 0;
    }
  };

  const calculateFit = async () => {
    const lowerResume = resumeText.toLowerCase();
    const lowerJD = jdText.toLowerCase();

    const jdKeywords = extractKeywords(lowerJD);
    const resumeKeywords = extractKeywords(lowerResume);

    setJdSkills(jdKeywords);

    const matched = jdKeywords.filter((k) => resumeKeywords.includes(k));
    const missing = jdKeywords.filter((k) => !resumeKeywords.includes(k));

    const keywordScore = matched.length / jdKeywords.length;
    const semanticScore = await getSemanticScore(lowerResume, lowerJD);

    const finalScore = (keywordScore * 0.5 + semanticScore * 0.5) * 100;

    setFitScore(finalScore.toFixed(2));
    setMissingSkills(missing);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100 p-4">
      <h1 className="text-3xl font-bold text-center mb-6 text-blue-900 drop-shadow">Resume vs JD Fit % Calculator</h1>
      <div className="grid gap-6 max-w-4xl mx-auto">
        <Card className="shadow-xl bg-white bg-opacity-80 backdrop-blur rounded-2xl">
          <CardContent className="p-6">
            <label className="font-semibold">Upload Resume (Text/PDF):</label>
            <Input type="file" accept=".txt,.pdf" onChange={(e) => handleFileUpload(e, setResumeText)} />
            <Textarea className="mt-2" rows={6} value={resumeText} onChange={(e) => setResumeText(e.target.value)} />
          </CardContent>
        </Card>

        <Card className="shadow-xl bg-white bg-opacity-80 backdrop-blur rounded-2xl">
          <CardContent className="p-6">
            <label className="font-semibold">Upload JD (Text/PDF):</label>
            <Input type="file" accept=".txt,.pdf" onChange={(e) => handleFileUpload(e, setJdText)} />
            <Textarea className="mt-2" rows={6} value={jdText} onChange={(e) => setJdText(e.target.value)} />
          </CardContent>
        </Card>

        <div className="text-center">
          <Button onClick={calculateFit} className="px-6 py-2 text-lg">Calculate Fit %</Button>
        </div>

        {fitScore && (
          <div className="mt-4 text-xl text-center font-semibold">
            Fit Score: <span className="text-green-600">{fitScore}%</span>
          </div>
        )}

        {missingSkills.length > 0 && (
          <div className="mt-4">
            <h2 className="text-md font-bold mb-1">‚ùå Skills Missing from Resume:</h2>
            <ul className="list-disc list-inside text-sm">
              {missingSkills.map((skill, i) => (
                <li key={i}>{skill}</li>
              ))}
            </ul>
          </div>
        )}

        {jdSkills.length > 0 && (
          <div className="mt-4">
            <h2 className="text-md font-bold mb-1">üìã Skills/Requirements from JD:</h2>
            <ul className="list-disc list-inside text-sm">
              {jdSkills.map((skill, i) => (
                <li key={i}>{skill}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}
